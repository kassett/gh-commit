package cmd

import (
	"fmt"
	"github.com/spf13/cobra"
	"os"
)

// VERSION number: changed in CI
const VERSION = "0.0.3"

var rootCmd = &cobra.Command{
	Use:   "gh-commit",
	Short: "gh-commit: helps commit changes easily",
	Long:  "gh-commit: a CLI tool for committing changes via the Github API",
	Run: func(cmd *cobra.Command, args []string) {
		version, _ := cmd.Flags().GetBool("version")
		if version {
			fmt.Println("gh-commit", VERSION)
			os.Exit(1)
		}

		usePr, _ := cmd.Flags().GetBool("use-pr")
		title, _ := cmd.Flags().GetString("title")
		description, _ := cmd.Flags().GetString("description")
		headRef, _ := cmd.Flags().GetString("head-ref")
		if headRef == "" {
			headRef = "Branch"
		}

		dryRun, _ := cmd.Flags().GetBool("dry-run")
		all, _ := cmd.Flags().GetBool("all")
		unTracked, _ := cmd.Flags().GetBool("untracked")
		print(dryRun, all, unTracked, title, description)
		print(usePr, title, description)

	},
}

func Execute() {
	//var branch string       // current branch will be the branch targeted for commit
	//var usePullRequest bool // will open a pull request with the base ref as `branch`.
	//var headRef string      // only works if usePullRequest is specified. will be randomly generated if not specified
	//
	//var commitAllFiles bool
	//var dryRun bool
	//var syncLocal bool
	//
	//fmt.Print(branch, usePullRequest, headRef, commitAllFiles, dryRun, syncLocal)
	cobra.CheckErr(rootCmd.Execute())
}

func init() {
	var prLabels []string
	rootCmd.Flags().StringSliceVarP(&prLabels, "label", "l", []string{},
		"specify PR labels to use")

	rootCmd.Flags().BoolP("version", "V", false, "print current version")
	rootCmd.Flags().StringP("head-ref", "H", "", "use HEAD ref for PR")
	rootCmd.Flags().BoolP("all", "A", false, "commit all tracked files")
	rootCmd.Flags().BoolP("untracked", "U", false, "commit untracked files")
	rootCmd.Flags().StringP("description", "D", "", "PR description")
	rootCmd.Flags().StringP("title", "T", "", "PR title")
	rootCmd.Flags().BoolP("sync-local", "S", false, "sync local changes")
	rootCmd.Flags().BoolP("dry-run", "d", false, "show files for commit")
	rootCmd.Flags().StringP("message", "m", "", "commit message")
	rootCmd.Flags().BoolP("use-pr", "P", false, "create a PR rather than committing directly to the branch")

	_ = rootCmd.MarkFlagRequired("message")
	rootCmd.SetHelpTemplate(getRootHelp())
}

func getRootHelp() string {
	return `
gh-commit: commit files using the Github API. Commits made via the API will
be recognized as signed if used in an Actions runner. Using a PAT will also recognize these
commits as signed.

Synopsis:
		gh commit [branch] [message] [flags]

Usage:
		gh commit [branch] [files] -m [message] [flags]
		
		The standard usage of gh commit. The selected files will be committed to the 
		branch specified with the message specified.

Flags:
		-P, --use-pr		commit files to a branch of which the branch specified is the base ref. 
							If not specified, the head ref will be an autogenerated string based on the base
							ref and a random integer. A PR will then be opened with an optionally specified title
							and description
		-H, --head-ref		commit files to a head ref of which the branch specified is the base ref
		-T, --title			the title of the PR opened. Only relevant if used with --use-pr. If not specified,
							the title will be the commit message
		-D, --description	the description of the PR opened. Only relevant if used with --use-pr. If not specified,
							the description will be the commit message
		-d, --dry-run		show which files will be committed by running the command
		-S, --sync-local	sync the working branch with the remote branch. Only relevant if the working branch
							is the same as the target branch, and mutually exclusive with --use-pr
		-m, --message		the commit message. Required
		-A, --all			commits all tracked files with a diff from the working branch. Should only be used if the 
							working branch is known to be update to date with the remote. Automatically includes all
							files already staged.
		-U, --untracked		commits even untracked files. When used in conjunction with -A, all files shown by git 
							status will be commit.
		-L, --labels		labels for the resulting PR. Only relevant if used with --use-pr
		-h, --help			show this help message
`
}
